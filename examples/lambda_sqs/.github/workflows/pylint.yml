# Summary:
# Execute the pylint analysis on code
# Read here for mode info: https://pylint.pycqa.org/en/latest/ and  https://www.python.org/dev/peps/pep-0008/

name: Execute the pylint analysis

#on:
#  # There are several ways to trigger Github actions - See https://help.github.com/en/actions/reference/events-that-trigger-workflows#example-using-a-single-event for a comprehensive list:
#  # - "push": Triggers each time a commit is pushed
#  # - "pull_request": Triggers each time a commit is pushed within a pull request, it makes it much easier to write comments within the PR, but it suffers some strong limitations:
#  #   - There is no way to trigger when a PR is merged into another - See https://github.community/t/pull-request-action-does-not-run-on-merge/16092?u=vadorequest
#  #   - It won't trigger when the PR is conflicting with its base branch - See https://github.community/t/run-actions-on-pull-requests-with-merge-conflicts/17104/2?u=vadorequest
#  push: # Triggers on each pushed commit
#    branches:
#      - 'master'
on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # python-version: [ '3.x', 'pypy-3.7', 'pypy-3.8' ]
        python-version: ["3.8", "3.9", "3.10"]
    name: Python ${{ matrix.python-version }} sample
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint
      - name: Analysing the code with pylint
        run: pylint app.py lambda_app tests